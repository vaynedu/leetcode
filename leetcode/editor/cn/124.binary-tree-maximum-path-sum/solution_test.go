package leetcode

// ‰∫åÂèâÊ†ë‰∏≠ÁöÑÊúÄÂ§ßË∑ØÂæÑÂíå

import (
	"fmt"
	"math"
	"testing"
)

//‰∫åÂèâÊ†ë‰∏≠ÁöÑ Ë∑ØÂæÑ Ë¢´ÂÆö‰πâ‰∏∫‰∏ÄÊù°ËäÇÁÇπÂ∫èÂàóÔºåÂ∫èÂàó‰∏≠ÊØèÂØπÁõ∏ÈÇªËäÇÁÇπ‰πãÈó¥ÈÉΩÂ≠òÂú®‰∏ÄÊù°Ëæπ„ÄÇÂêå‰∏Ä‰∏™ËäÇÁÇπÂú®‰∏ÄÊù°Ë∑ØÂæÑÂ∫èÂàó‰∏≠ Ëá≥Â§öÂá∫Áé∞‰∏ÄÊ¨° „ÄÇËØ•Ë∑ØÂæÑ Ëá≥Â∞ëÂåÖÂê´‰∏Ä‰∏™ ËäÇÁÇπÔºå‰∏î‰∏ç‰∏ÄÂÆö
//ÁªèËøáÊ†πËäÇÁÇπ„ÄÇ
//
// Ë∑ØÂæÑÂíå ÊòØË∑ØÂæÑ‰∏≠ÂêÑËäÇÁÇπÂÄºÁöÑÊÄªÂíå„ÄÇ
//
// Áªô‰Ω†‰∏Ä‰∏™‰∫åÂèâÊ†ëÁöÑÊ†πËäÇÁÇπ root ÔºåËøîÂõûÂÖ∂ ÊúÄÂ§ßË∑ØÂæÑÂíå „ÄÇ
//
//
//
// Á§∫‰æã 1Ôºö
//
//
//ËæìÂÖ•Ôºöroot = [1,2,3]
//ËæìÂá∫Ôºö6
//Ëß£ÈáäÔºöÊúÄ‰ºòË∑ØÂæÑÊòØ 2 -> 1 -> 3 ÔºåË∑ØÂæÑÂíå‰∏∫ 2 + 1 + 3 = 6
//
// Á§∫‰æã 2Ôºö
//
//
//ËæìÂÖ•Ôºöroot = [-10,9,20,null,null,15,7]
//ËæìÂá∫Ôºö42
//Ëß£ÈáäÔºöÊúÄ‰ºòË∑ØÂæÑÊòØ 15 -> 20 -> 7 ÔºåË∑ØÂæÑÂíå‰∏∫ 15 + 20 + 7 = 42
//
//
//
//
// ÊèêÁ§∫Ôºö
//
//
// Ê†ë‰∏≠ËäÇÁÇπÊï∞ÁõÆËåÉÂõ¥ÊòØ [1, 3 * 10‚Å¥]
// -1000 <= Node.val <= 1000
//
//
// Related Topics Ê†ë Ê∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢ Âä®ÊÄÅËßÑÂàí ‰∫åÂèâÊ†ë üëç 2379 üëé 0

//leetcode submit region begin(Prohibit modification and deletion)
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */

func dfs(root *TreeNode, ans *int) int {
	if root == nil {
		return 0
	}
	left := max(0, dfs(root.Left, ans))
	right := max(0, dfs(root.Right, ans))

	*ans = max(*ans, root.Val+left+right)
	return max(root.Val+max(left, right), 0)
}

func maxPathSum(root *TreeNode) int {
	ans := math.MinInt32
	dfs(root, &ans)
	return ans
}

func max(x, y int) int {
	if x > y {
		return x
	}
	return y
}

//leetcode submit region end(Prohibit modification and deletion)

type TreeNode struct {
	Val   int
	Left  *TreeNode
	Right *TreeNode
}

func TestBinaryTreeMaximumPathSum(t *testing.T) {
	fmt.Println("come on baby !!!")
	root := &TreeNode{
		Val: 1,
		Left: &TreeNode{
			Val: 2,
			Left: &TreeNode{
				Val:   3,
				Left:  nil,
				Right: nil,
			},
			Right: &TreeNode{
				Val:   4,
				Left:  nil,
				Right: nil,
			},
		},
		Right: &TreeNode{
			Val:  5,
			Left: nil,
		},
	}
	fmt.Println(maxPathSum(root)) // Expected output: 16 (1 + 2 + 4 + 5 + 3)

	// Test case 1: Single node
	root1 := &TreeNode{
		Val: -10,
	}
	fmt.Println(maxPathSum(root1)) // Expected output: -10

	// Test case 2: Example from the problem statement
	root2 := &TreeNode{
		Val: -10,
		Left: &TreeNode{
			Val: 9,
		},
		Right: &TreeNode{
			Val: 20,
			Left: &TreeNode{
				Val: 15,
			},
			Right: &TreeNode{
				Val: 7,
			},
		},
	}
	fmt.Println(maxPathSum(root2)) // Expected output: 42 (15 + 20 + 7)

	// Test case 3: All negative values
	root3 := &TreeNode{
		Val: -3,
		Left: &TreeNode{
			Val: -9,
			Left: &TreeNode{
				Val: -15,
			},
			Right: &TreeNode{
				Val: -20,
			},
		},
		Right: &TreeNode{
			Val: -7,
			Left: &TreeNode{
				Val: -15,
			},
			Right: &TreeNode{
				Val: -7,
			},
		},
	}
	fmt.Println(maxPathSum(root3)) // Expected output: -3

	// Test case 4: Mixed positive and negative values
	root4 := &TreeNode{
		Val: 2,
		Left: &TreeNode{
			Val: -1,
		},
		Right: &TreeNode{
			Val: -2,
		},
	}
	fmt.Println(maxPathSum(root4)) // Expected output: 2

	// Test case 5: Degenerate tree (linked list)
	root5 := &TreeNode{
		Val: 1,
		Right: &TreeNode{
			Val: 2,
			Right: &TreeNode{
				Val: 3,
				Right: &TreeNode{
					Val: 4,
					Right: &TreeNode{
						Val: 5,
					},
				},
			},
		},
	}
	fmt.Println(maxPathSum(root5)) // Expected output: 15 (1 + 2 + 3 + 4 + 5)
}
